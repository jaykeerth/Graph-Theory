package graph;
import java.util.*;
public class Graph {
        public int[] dijkstras(int v)  //O(E+V)*O(LogV) which is O((E+V)*LogV) = O(ELogV) but here it will be V instead of Logv for 'contains' and 'remove'
	{
		int dist[] = new int[v];
		PriorityQueue<State> minHeap = new PriorityQueue<State>();
		dist[0] = 0;
		State s = new State(0, 0);
		minHeap.offer(s);
		for(int i=1; i<v; i++)
		{
			dist[i] = Integer.MAX_VALUE;
			s = new State(i, dist[i]);
			minHeap.offer(s);
		}
		State currNode;
		int tempDist = 0;
		while(!minHeap.isEmpty())
		{
			currNode = minHeap.poll();
			tempDist = currNode.distance;
			dist[currNode.index] = currNode.distance;
			for(Node adjNode: getAdjacent(currNode))
			{
				if(minHeap.contains(new State(adjNode.index, 0)))
				{
					if(tempDist + adjNode.distance < dist[adjNode.index])
					{
						dist[adjNode.index] = tempDist + adjNode.distance;
						minHeap.remove(new State(adjNode.index, 0));
						minHeap.offer(new State(adjNode.index, dist[adjNode.index]));
					}
				}
			}
		}
		return dist;
	}
	
	Stack<Integer> st = new Stack<Integer>();
	public int[] shortestPathDAG(int v)  //for DAG. TC: O(V+E)
	{
		visited = new boolean[v];
		for(int i=0; i<v; i++)
		{
			if(!visited[i])
				topologicalSort(i);
		}
		int dist[] = new int[v];
		dist[0] = 0;
		for(int i=1; i<v; i++)
		{
			dist[i] = Integer.MAX_VALUE;
		}
		int currNode;
		while(!st.isEmpty())
		{
			currNode = st.pop();
			for(Node adjNode: getAdjacent(currNode))
			{
				if(dist[currNode] + adjNode.distance < dist[adjNode.index])
				{
					dist[adjNode.index] = dist[currNode] + adjNode.distance;
				}
			}
		}
		return dist;
	}
	static boolean recStack[];
	public static boolean isCyclicDirected(Graph g)                                      //Time Complexity: O(V+E)
	{
		int vertices = g.vertices;
		visited = new boolean[vertices];
		recStack = new boolean[vertices];
		int i;
		for(i=0; i<vertices; i++)
		{
			visited[i] = false;
			recStack[i] = false;
		}
		for(i=0; i<vertices; i++)
		{
			if(isCyclicDirectedUtil(g, i))
				return true;
		}
		return false;
	}
	public static boolean isCyclicDirectedUtil(Graph g, int i)
	{
		if(visited[i] == false)
		{
			visited[i] = true;
			recStack[i] = true;
			for(Integer v: getAdjacent(g, i))
			{
			   if(visited[v] == false && isCyclicDirectedUtil(g, v) == true)
				   return true;
			   else if(recStack[v] == true)
				   return true;
			}
		}
		recStack[i] = false;
		return false;
	}
	
	static Stack<Integer> st = new Stack<Integer>();
	public static void topologicalSort(Graph g)                                   //Time Complexity: O(V+E)
	{
		int vertices = g.vertices;
		visited = new boolean[vertices];
		int i;
		for(i=0; i<vertices; i++)
			visited[i] = false;
		for(i=0; i<vertices; i++)
		{
			if(visited[i] == false)
				topologicalSortUtil(g, i);
		}
		while(!st.isEmpty())
			System.out.println(st.pop());
	}
	public static void topologicalSortUtil(Graph g, int v)
	{
		visited[v] = true;
		for(Integer i: getAdjacent(g, v))
		{
			if(visited[i] == false)
				topologicalSortUtil(g, i);
		}
		st.push(v);
	}
	public static void bfs(Graph g, int source)                                     //Time Complexity: O(V+E)
	{                                                                               //Without Recursion: using queue
		int vertices = g.vertices;
		visited = new boolean[vertices];
		for(int i=0; i<vertices; i++)
			visited[i] = false;
		LinkedList<Integer> queue = new LinkedList<Integer>();
		queue.add(source);
		visited[source] = true;
		while(!queue.isEmpty())
		{
			int v = queue.removeFirst();
			System.out.println(v);
			for(Integer i: getAdjacent(g, v))
			{
				if(visited[i] == false)
				{
					queue.add(i);
					visited[i] = true;
				}
			}
		}
	}
	public static void dfs3(Graph g, int source)                     //Time Complexity: O(V+E)
	{                                                                //Without recursion - using stack
		int vertices = g.vertices;                                   //right-left order will be different from recursion. This will traverse right-side first
		visited = new boolean[vertices];
		for(int i=0; i<vertices; i++)
			visited[i] = false;
		Stack<Integer> st = new Stack<Integer>();
		st.push(source);
		visited[source] = true;
		while(!st.isEmpty())
		{
			int v = st.pop();
			System.out.println(v);
			for(Integer i: getAdjacent(g, v))                            
			{
				if(visited[i] == false)
				{
					visited[i] = true;
					st.push(i);
				}
			}
		}
	}
	public static void dfs(Graph g, int source)                       //Time Complexity: O(V+E)
	{                                                                 //Depth First Traversal from a given source node
		int vertices = g.vertices;
		visited = new boolean[vertices];
		for(int i=0; i<vertices; i++)
			visited[i] = false;
		dfsUtil(g, source);
	}
	public static void dfs2(Graph g)                                  //Depth First Traversal for disconnected graph
	{
		int vertices = g.vertices;
		visited = new boolean[vertices];
		for(int i=0; i<vertices; i++)
			visited[i] = false;
		for(int j=0; j<vertices; j++)
		{
			if(visited[j] == false)
				dfsUtil(g, j);
		}
	}
	public static void dfsUtil(Graph g, int vertex)
	{
		visited[vertex] = true;
		System.out.println(vertex);
	    for(Integer v : getAdjacent(g, vertex))
	    {
	    	if(visited[v] == false)
	    		dfsUtil(g, v);
	    }
	}
    public static void floydWarshall(int graph[][])               //check
    {
    	int v = graph.length;
    	int dist[][] = new int[v][v];
    	int i;
    	for(i=0; i<v; i++)
    	{
    		for(int j=0; j<v; j++)
    			dist[i][j] = graph[i][j];
    	}
    	for(int k=0; k<v; k++)
    	{
    		for(i=0; i<v; i++)
    		{
    			for(int j=0; j<v; j++)
    			{
    				if(dist[i][k] != Integer.MAX_VALUE && dist[k][j] != Integer.MAX_VALUE && dist[i][k] + dist[k][j] < dist[i][j]){
    					dist[i][j] = dist[i][k] + dist[k][j];
    					System.out.println("inside if" +dist[i][j]);
    				}
    			}
    		}
    	}
    	for(i=0; i<v; i++)
    	{
    		for(int j=0; j<v; j++)
    		{
    			System.out.print("      "+dist[i][j]);
    		}
    		System.out.println();
    	}
    }
    
    /******************************/
    int vertices;
	ArrayList<LinkedList<Integer>> adjList;
	
	public Graph(int vertices)
	{
		this.vertices = vertices;
		adjList = new ArrayList<LinkedList<Integer>>();
		for(int i=0; i<vertices; i++)
		{
			adjList.add(i, new LinkedList<Integer>());
		}
	}
	public void addEdge(int source, int destination)
	{
		LinkedList<Integer> list = adjList.remove(source);
		list.add(destination);
		adjList.add(source, list);
	}
	public static LinkedList<Integer> getAdjacent(Graph g, int vertex)
	{
		return g.adjList.get(vertex);
	}
	
	static boolean visited[];
	
	/********************************/
	
	public static void main(String[] args) {
		/*int graph[][] = { {0,  5, Integer.MAX_VALUE, 10},
                          {Integer.MAX_VALUE, 0,  3, -1},
                          {Integer.MAX_VALUE, Integer.MAX_VALUE, 0,  1},
                          {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 0}
                        };	
        floydWarshall(graph); */
        
		Graph g = new Graph(4);
		g.addEdge(0, 1);
	    g.addEdge(0, 2);
	    g.addEdge(1, 2);
	    g.addEdge(2, 0);
	    g.addEdge(2, 3);
	    g.addEdge(3, 3);
	    System.out.println(isCyclicDirected(g));
	}
}
